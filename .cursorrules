# Cursor Rules cho d·ª± √°n TicketLMS

## üéØ T·ªïng quan d·ª± √°n

-   **Framework**: Next.js 15 v·ªõi App Router
-   **Language**: TypeScript
-   **Styling**: Tailwind CSS
-   **Database**: Supabase (PostgreSQL)
-   **Authentication**: Supabase Auth
-   **State Management**: React Query (TanStack Query)
-   **UI Components**: Radix UI + shadcn/ui

## üìÅ C·∫•u tr√∫c th∆∞ m·ª•c

```
src/
‚îú‚îÄ‚îÄ app/                    # Next.js App Router pages
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API routes
‚îÇ   ‚îú‚îÄ‚îÄ (auth)/            # Auth pages (login, register)
‚îÇ   ‚îú‚îÄ‚îÄ dashboard/         # Dashboard pages
‚îÇ   ‚îú‚îÄ‚îÄ tickets/           # Ticket management
‚îÇ   ‚îú‚îÄ‚îÄ users/             # User management
‚îÇ   ‚îî‚îÄ‚îÄ organizations/     # Organization management
‚îú‚îÄ‚îÄ components/            # Reusable components
‚îÇ   ‚îú‚îÄ‚îÄ ui/               # Base UI components (shadcn/ui)
‚îÇ   ‚îú‚îÄ‚îÄ badges/           # Badge components (status, type, priority, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ modals/           # Modal components (ImageModal, LinkModal, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ forms/            # Form components (LoginForm, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ common/           # Common utility components (HtmlContent, RichTextEditor)
‚îÇ   ‚îú‚îÄ‚îÄ navigation/       # Navigation components (DashboardNav, NotificationDropdown)
‚îÇ   ‚îú‚îÄ‚îÄ tickets/          # Ticket-specific components
‚îÇ   ‚îú‚îÄ‚îÄ dashboard/        # Dashboard components
‚îÇ   ‚îú‚îÄ‚îÄ providers/        # Context providers (QueryProvider)
‚îÇ   ‚îî‚îÄ‚îÄ index.ts          # Main barrel export
‚îú‚îÄ‚îÄ hooks/                # Custom React hooks
‚îú‚îÄ‚îÄ lib/                  # Utility functions & configurations
‚îú‚îÄ‚îÄ types/                # TypeScript type definitions
‚îî‚îÄ‚îÄ middleware.ts         # Next.js middleware
```

## üõ†Ô∏è Nguy√™n t·∫Øc thi·∫øt k·∫ø

### 1. Component Organization

```
src/components/
‚îú‚îÄ‚îÄ ui/                    # Base UI components (shadcn/ui)
‚îú‚îÄ‚îÄ badges/               # Badge components (status, type, priority, etc.)
‚îú‚îÄ‚îÄ modals/               # Modal components (ImageModal, LinkModal, etc.)
‚îú‚îÄ‚îÄ forms/                # Form components (LoginForm, etc.)
‚îú‚îÄ‚îÄ common/               # Common utility components (HtmlContent, RichTextEditor)
‚îú‚îÄ‚îÄ navigation/           # Navigation components (DashboardNav, NotificationDropdown)
‚îú‚îÄ‚îÄ tickets/              # Ticket-specific components
‚îú‚îÄ‚îÄ dashboard/            # Dashboard components
‚îú‚îÄ‚îÄ providers/            # Context providers (QueryProvider)
‚îî‚îÄ‚îÄ index.ts              # Main barrel export
```

**Nguy√™n t·∫Øc t·ªï ch·ª©c:**

-   **Domain-based**: Nh√≥m theo ch·ª©c nƒÉng nghi·ªáp v·ª• (tickets, dashboard, etc.)
-   **Function-based**: Nh√≥m theo lo·∫°i component (badges, modals, forms, etc.)
-   **Barrel Exports**: M·ªói nh√≥m c√≥ index.ts ƒë·ªÉ export t·∫•t c·∫£ components
-   **Main Export**: src/components/index.ts export t·∫•t c·∫£ nh√≥m

### 2. Component Architecture

-   **Atomic Design**: atoms ‚Üí molecules ‚Üí organisms ‚Üí templates ‚Üí pages
-   **Single Responsibility**: M·ªói component ch·ªâ l√†m m·ªôt vi·ªác
-   **Composition over Inheritance**: ∆Øu ti√™n composition
-   **Props Interface**: Lu√¥n ƒë·ªãnh nghƒ©a interface cho props
-   **Default Props**: S·ª≠ d·ª•ng default values khi c·∫ßn thi·∫øt
-   **Organized Structure**: Components ƒë∆∞·ª£c nh√≥m theo ch·ª©c nƒÉng v√† domain
-   **Barrel Exports**: S·ª≠ d·ª•ng barrel exports cho organized imports

### 2. State Management

-   **Local State**: useState cho component-level state
-   **Server State**: React Query cho API data
-   **Global State**: Tr√°nh, ch·ªâ d√πng khi th·ª±c s·ª± c·∫ßn thi·∫øt
-   **Form State**: react-hook-form v·ªõi zod validation

### 3. API Design

-   **RESTful**: Tu√¢n th·ªß REST principles
-   **Consistent Response**: Lu√¥n d√πng format response nh·∫•t qu√°n
-   **Error Handling**: Proper error responses v·ªõi status codes
-   **Authentication**: withAuth middleware cho protected routes
-   **Validation**: Zod schemas cho input validation

### 4. TypeScript Standards

-   **Strict Mode**: Lu√¥n b·∫≠t strict mode
-   **Interface over Type**: ∆Øu ti√™n interface cho object shapes
-   **Generic Types**: S·ª≠ d·ª•ng generics cho reusable types
-   **Type Guards**: S·ª≠ d·ª•ng type guards khi c·∫ßn
-   **No Any**: Tr√°nh s·ª≠ d·ª•ng `any`, d√πng `unknown` n·∫øu c·∫ßn

## üìù Coding Standards

### 1. Naming Conventions

```typescript
// Components: PascalCase
export function TicketTable() {}

// Functions: camelCase
const fetchTickets = async () => {};

// Constants: UPPER_SNAKE_CASE
const API_BASE_URL = "https://api.example.com";

// Interfaces: PascalCase v·ªõi I prefix cho complex interfaces
interface ITicketFormData {
    title: string;
    description: string;
}

// Types: PascalCase
type TicketStatus = "open" | "in_progress" | "closed";
```

### 2. File Naming

-   **Components**: PascalCase.tsx (TicketTable.tsx)
-   **Hooks**: camelCase.ts (useTicketList.ts)
-   **Utilities**: camelCase.ts (api-utils.ts)
-   **Types**: camelCase.ts (ticket.ts)
-   **Constants**: camelCase.ts (constants.ts)
-   **Barrel Exports**: index.ts (cho m·ªói component group)

### 3. Import/Export

```typescript
// Prefer named exports
export function Component() {}
export const utility = () => {};

// Use barrel exports for organized imports
// components/badges/index.ts
export { TicketTypeBadge, TicketStatusBadge, TicketPriorityBadge } from "./";

// components/index.ts (main barrel export)
export * from "./ui";
export * from "./badges";
export * from "./modals";
export * from "./forms";
export * from "./common";
export * from "./navigation";
export * from "./tickets";
export * from "./dashboard";
export * from "./providers";

// Import order (prefer barrel imports)
import React from "react";
import { NextRequest } from "next/server";
import { Button } from "@/components/ui/button";
import { TicketTypeBadge, TicketStatusBadge } from "@/components/badges";
import { useTicketList } from "@/hooks/useTicketList";
import { Ticket } from "@/types";
```

### 4. Error Handling

```typescript
// API Routes
try {
    const result = await someOperation();
    return createSuccessResponse(result);
} catch (error) {
    return handleApiError(error, "context");
}

// Components
const { data, error, isLoading } = useQuery({
    queryKey: ["tickets"],
    queryFn: fetchTickets,
});

if (isLoading) return <LoadingSpinner />;
if (error) return <ErrorMessage error={error} />;
```

### 5. Form Handling

```typescript
// Use react-hook-form with zod
const form = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {
        title: "",
        description: "",
    },
});

// Validation schema
const schema = z.object({
    title: z.string().min(1, "Title is required"),
    description: z
        .string()
        .min(10, "Description must be at least 10 characters"),
});
```

## üîí Security Principles

### 1. Authentication & Authorization

-   **Server-side validation**: Lu√¥n validate tr√™n server
-   **Role-based access**: Ki·ªÉm tra role tr∆∞·ªõc khi cho ph√©p action
-   **Organization isolation**: Non-admin users ch·ªâ th·∫•y data c·ªßa org m√¨nh
-   **Input sanitization**: Sanitize t·∫•t c·∫£ user inputs

### 2. Data Protection

-   **Environment variables**: S·ª≠ d·ª•ng .env cho sensitive data
-   **No client secrets**: Kh√¥ng expose secrets ra client
-   **HTTPS only**: Lu√¥n s·ª≠ d·ª•ng HTTPS
-   **CORS**: Configure CORS properly

## üé® UI/UX Standards

### 1. Design System

-   **Consistent spacing**: S·ª≠ d·ª•ng Tailwind spacing scale
-   **Color palette**: S·ª≠ d·ª•ng Tailwind colors
-   **Typography**: Consistent font sizes v√† weights
-   **Responsive design**: Mobile-first approach

### 2. Accessibility

-   **Semantic HTML**: S·ª≠ d·ª•ng semantic elements
-   **ARIA labels**: Th√™m ARIA labels khi c·∫ßn
-   **Keyboard navigation**: H·ªó tr·ª£ keyboard navigation
-   **Color contrast**: ƒê·∫£m b·∫£o contrast ratio ƒë·ªß

### 3. Loading States

```typescript
// Always show loading states
if (isLoading) {
    return <LoadingSpinner />;
}

// Skeleton loading cho better UX
if (isLoading) {
    return <TicketTableSkeleton />;
}
```

## üöÄ Performance Standards

### 1. Code Splitting

-   **Dynamic imports**: S·ª≠ d·ª•ng dynamic imports cho large components
-   **Route-based splitting**: Next.js t·ª± ƒë·ªông code splitting
-   **Component lazy loading**: Lazy load components khi c·∫ßn

### 2. Caching Strategy

-   **React Query**: S·ª≠ d·ª•ng React Query cho server state caching
-   **Static generation**: S·ª≠ d·ª•ng SSG khi c√≥ th·ªÉ
-   **CDN**: S·ª≠ d·ª•ng CDN cho static assets

### 3. Bundle Optimization

-   **Tree shaking**: ƒê·∫£m b·∫£o tree shaking ho·∫°t ƒë·ªông
-   **Bundle analysis**: S·ª≠ d·ª•ng bundle analyzer
-   **Dependency optimization**: Lo·∫°i b·ªè unused dependencies

## üß™ Testing Standards

### 1. Test Structure

```typescript
// Component tests
describe("TicketTable", () => {
    it("should render tickets correctly", () => {
        // test implementation
    });
});

// API tests
describe("POST /api/tickets", () => {
    it("should create ticket successfully", () => {
        // test implementation
    });
});
```

### 2. Test Coverage

-   **Unit tests**: Cho utilities v√† hooks
-   **Integration tests**: Cho API routes
-   **E2E tests**: Cho critical user flows

## üìö Documentation Standards

### 1. Code Comments

```typescript
/**
 * Fetches tickets with pagination and filtering
 * @param page - Current page number
 * @param filters - Filter options
 * @returns Promise with tickets data
 */
export async function fetchTickets(page: number, filters: TicketFilters) {
    // implementation
}
```

### 2. README Structure

-   **Project overview**
-   **Setup instructions**
-   **API documentation**
-   **Component documentation**
-   **Deployment guide**

## üîÑ Git Workflow

### 1. Commit Messages

```
feat: add ticket creation functionality
fix: resolve infinite render issue
refactor: improve API error handling
docs: update README with new features
test: add unit tests for ticket hooks
```

### 2. Branch Naming

-   `feature/ticket-management`
-   `fix/auth-bug`
-   `refactor/api-structure`
-   `docs/update-readme`

## üö® Anti-patterns to Avoid

### 1. Code Anti-patterns

-   ‚ùå Using `any` type
-   ‚ùå Mutating props directly
-   ‚ùå Large monolithic components
-   ‚ùå Inline styles
-   ‚ùå Console.log in production
-   ‚ùå Hardcoded values
-   ‚ùå Scattered component organization
-   ‚ùå Inconsistent import patterns

### 2. Performance Anti-patterns

-   ‚ùå Unnecessary re-renders
-   ‚ùå Large bundle sizes
-   ‚ùå Blocking operations in render
-   ‚ùå Memory leaks

### 3. Security Anti-patterns

-   ‚ùå Client-side validation only
-   ‚ùå Exposing sensitive data
-   ‚ùå No input sanitization
-   ‚ùå Weak authentication

## ‚ö†Ô∏è Quy ƒë·ªãnh nghi√™m ng·∫∑t

### 1. Kh√¥ng t·ª± t·∫°o file b√°o c√°o

-   ‚ùå **KH√îNG** t·ª± t·∫°o file `.md` ƒë·ªÉ b√°o c√°o
-   ‚ùå **KH√îNG** t·∫°o file `CLEANUP_REPORT.md`, `OPTIMIZATION_REPORT.md`, etc.
-   ‚ùå **KH√îNG** t·∫°o file documentation kh√¥ng ƒë∆∞·ª£c y√™u c·∫ßu
-   ‚úÖ Ch·ªâ t·∫°o file `.md` khi ƒë∆∞·ª£c y√™u c·∫ßu c·ª• th·ªÉ

### 2. Kh√¥ng t·ª± √Ω refactor code

-   ‚ùå **KH√îNG** t·ª± √Ω refactor code m√† kh√¥ng ƒë∆∞·ª£c y√™u c·∫ßu
-   ‚ùå **KH√îNG** thay ƒë·ªïi c·∫•u tr√∫c API m√† kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ
-   ‚ùå **KH√îNG** refactor components m√† kh√¥ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
-   ‚úÖ Ch·ªâ refactor khi ƒë∆∞·ª£c y√™u c·∫ßu r√µ r√†ng

### 3. X√°c nh·∫≠n tr∆∞·ªõc khi refactor

-   ‚úÖ **LU√îN** x√°c nh·∫≠n v·ªõi user tr∆∞·ªõc khi refactor code
-   ‚úÖ **GI·∫¢I TH√çCH** l√Ω do c·∫ßn refactor v√† l·ª£i √≠ch
-   ‚úÖ **ƒê·ªÄ XU·∫§T** ph∆∞∆°ng √°n refactor c·ª• th·ªÉ
-   ‚úÖ **CH·ªú** s·ª± ƒë·ªìng √Ω tr∆∞·ªõc khi th·ª±c hi·ªán
-   ‚úÖ **CH·ªà** refactor khi user ƒë·ªìng √Ω

### 4. Nguy√™n t·∫Øc l√†m vi·ªác

-   üîç **T·∫¨P TRUNG** v√†o task ƒë∆∞·ª£c y√™u c·∫ßu
-   üéØ **CH√çNH X√ÅC** - ch·ªâ l√†m nh·ªØng g√¨ ƒë∆∞·ª£c y√™u c·∫ßu
-   üìù **R√ï R√ÄNG** - gi·∫£i th√≠ch r√µ m·ªçi thay ƒë·ªïi
-   ‚ö° **HI·ªÜU QU·∫¢** - ho√†n th√†nh task nhanh ch√≥ng
-   üõ°Ô∏è **AN TO√ÄN** - kh√¥ng l√†m h·ªèng code hi·ªán t·∫°i

## üéØ Best Practices Summary

1. **Write clean, readable code**
2. **Follow TypeScript best practices**
3. **Implement proper error handling**
4. **Use consistent naming conventions**
5. **Write comprehensive tests**
6. **Document your code**
7. **Optimize for performance**
8. **Prioritize security**
9. **Maintain accessibility**
10. **Follow the established patterns**
11. **Organize components by domain and functionality**
12. **Use barrel exports for clean imports**

## üîß Development Tools

### 1. Essential Extensions

-   TypeScript
-   ESLint
-   Prettier
-   Tailwind CSS IntelliSense
-   GitLens

### 2. Scripts

```json
{
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint",
        "type-check": "tsc --noEmit"
    }
}
```

---

**L∆∞u √Ω**: Tu√¢n th·ªß c√°c nguy√™n t·∫Øc n√†y s·∫Ω gi√∫p code d·ªÖ ƒë·ªçc, b·∫£o tr√¨ v√† n√¢ng c·∫•p. Lu√¥n ∆∞u ti√™n code quality v√† user experience.
